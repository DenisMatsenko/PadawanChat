//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Authors = newAuthorsTable("public", "Authors", "")

type authorsTable struct {
	postgres.Table

	//Columns
	Username postgres.ColumnString
	ID       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthorsTable struct {
	authorsTable

	EXCLUDED authorsTable
}

// AS creates new AuthorsTable with assigned alias
func (a AuthorsTable) AS(alias string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorsTable with assigned schema name
func (a AuthorsTable) FromSchema(schemaName string) *AuthorsTable {
	return newAuthorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthorsTable with assigned table prefix
func (a AuthorsTable) WithPrefix(prefix string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthorsTable with assigned table suffix
func (a AuthorsTable) WithSuffix(suffix string) *AuthorsTable {
	return newAuthorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthorsTable(schemaName, tableName, alias string) *AuthorsTable {
	return &AuthorsTable{
		authorsTable: newAuthorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAuthorsTableImpl("", "excluded", ""),
	}
}

func newAuthorsTableImpl(schemaName, tableName, alias string) authorsTable {
	var (
		UsernameColumn = postgres.StringColumn("username")
		IDColumn       = postgres.IntegerColumn("id")
		allColumns     = postgres.ColumnList{UsernameColumn, IDColumn}
		mutableColumns = postgres.ColumnList{UsernameColumn, IDColumn}
	)

	return authorsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Username: UsernameColumn,
		ID:       IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
